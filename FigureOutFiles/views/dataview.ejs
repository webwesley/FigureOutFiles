<!DOCTYPE html>
<html>
  <head>
 <link rel='stylesheet' href='/stylesheets/style.css' />
<style>
#chartdiv {
  width: 100%;
  height: 500px;
}

.amcharts-export-menu-top-right {
  top: 10px;
  right: 0;
}
</style>
 <title><%= title %></title>
<!-- Resources -->
<script src="https://www.amcharts.com/lib/3/amcharts.js"></script>
<script src="https://www.amcharts.com/lib/3/serial.js"></script>
<script src="https://www.amcharts.com/lib/3/plugins/export/export.min.js"></script>
<script src="https://www.amcharts.com/lib/3/xy.js"></script>
<link rel="stylesheet" href="https://www.amcharts.com/lib/3/plugins/export/export.css" type="text/css" media="all" />
<script src="https://www.amcharts.com/lib/3/themes/light.js"></script>

	
	<% sortMethod %>
	<% xAxis %>
	<% yAxis %>
	<% minValue %>
	<% maxValue %>
  	<% var chartData = '[' %>
  	<% var tmp = '' %>
  	<% runningData.data.forEach(function(item) { %>
		<% if(item[xAxis] == '--' || item[yAxis] == '--') {return} %>
	  		
	  			<% chartData += ('{ "' +  xAxis +  '" : "' +  item[xAxis] +  '" , "' +  yAxis +  '" : "' +  item[yAxis] +  '"},') %>	
	  		
  		<% }); %>
  		<% chartData = (chartData.substring(0, chartData.length-1) + ']') %>

</head>
<!-- Chart code -->
<body>
<% include templates/headers.ejs %>

<p>
X-Axis:  	&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; Y-Axis: 
&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; 
&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; Minimum Value
&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; Maximum Value

<form method = "post" action = "/dataview" enctype="multipart/form-data">
<select name="X-Axis">
	<option value="Date">Date</option>
  <option value="Best Pace">Best Pace</option>
  <option value="Avg Pace">Average Pace</option> 
  <option value="Elev Gain">Elevation Gain</option>
  <option value="Elev Loss">Elevation Loss</option>
  <option value="Avg Stride Length">Average Stride Length</option>
   <option value="Distance">Distance</option>
   <option value="Avg Cadence">Avg Cadence</option>
</select>

<select name="Y-Axis">
 <option value="Best Pace">Best Pace</option>
  <option value="Avg Pace">Average Pace</option> 
  <option value="Elev Gain">Elev Gain</option>
  <option value="Elev Loss">Elev Loss</option>
  <option value="Avg Stride Length">Average Stride Length</option>
  <option value="Distance">Distance</option>
  <option value="Avg Cadence">Avg Cadence</option>
  
  </select>
  <input type="radio" name="sortMethod" value="AO" checked> Sort in Ascending Order
  <input type="radio" name="sortMethod" value="sort by Date" > Sort By Date
  <input type="number" name="minValue" value="Minimum Value"> 
  <input type="number" name="maxValue" value="Maximum Value"> 
 
  <br>  
<br>
<input type ="submit" value="Plot">
</form>

</p>
<script>
var keyValueY  = [['Date', ' '], ['Best Pace', '(Sec/Mi)'], ['Avg Pace', '(Sec/Mi)'], ['Elev Gain', '(Feet)'], ['Elev Loss', '(Feet)' ],
	['Distance', '(Miles)'], ['Avg Stride Length', '(Meters)'], ['Avg Cadence', '(Steps/Min)']];
var keyValueX = [['Date', ' '], ['Best Pace', '(Min/Mi)'], ['Avg Pace', '(Min/Mi)'], ['Elev Gain', '(Feet)'], ['Elev Loss', '(Feet)' ],
	['Distance', '(Miles)'], ['Avg Stride Length', '(Meters)'], ['Avg Cadence', '(Steps/Min)']];
var keyValueUpperLimit = [['Avg Stride Length', '2.5']];
var keyValueLowerLimit = [['Best Pace', '128'], ['Avg Pace', '128'], ['Avg Stride Length', '0.5']];

var lowerLimits = new Map(keyValueLowerLimit);
var upperLimits = new Map(keyValueUpperLimit);
var unitsY = new Map(keyValueY);
var unitsX = new Map(keyValueX);
</script>


<script>
var decodeEntities = (function() {
  // this prevents any overhead from creating the object each time
  var element = document.createElement('div');

  function decodeHTMLEntities (str) {
    if(str && typeof str === 'string') {
      // strip script/html tags
      str = str.replace(/<script[^>]*>([\S\s]*?)<\/script>/gmi, '');
      str = str.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, '');
      element.innerHTML = str;
      str = element.textContent;
      element.textContent = '';
    }

    return str;
  }

  return decodeHTMLEntities;
})();
</script>
<script>

function convertToMPM(chartData) {
if(('<%=xAxis%>' == 'Avg Pace') || ('<%=xAxis%>' == 'Best Pace')) {
chartData.forEach(function(item) {
	if(item['<%=xAxis%>'].indexOf('.') != '-1') {
		item['<%=xAxis%>'] = (60 * Math.pow(item['<%=xAxis%>'], -1));
		var tmp = item['<%=xAxis%>']
		for(var tmp = item['<%=xAxis%>']; tmp > 1; tmp--){}
		tmp = Math.round(60 * tmp);
		
		var str = (JSON.stringify(item['<%=xAxis%>']));
		var index = str.indexOf('.');
		str = str.substring(0, index);
	
		if(tmp < 10) {
			item['<%=xAxis%>'] = str + ':0' + tmp;
		} else {
			item['<%=xAxis%>'] = str + ':' + tmp;
		}
		
		}
	});
} if(('<%=yAxis%>' == 'Avg Pace') || ('<%=yAxis%>' == 'Best Pace')) {
	chartData.forEach(function(item) {
	if(item['<%=yAxis%>'].indexOf('.') != '-1') {
		item['<%=yAxis%>'] = (60 * Math.pow(item['<%=yAxis%>'], -1));
		var tmp = item['<%=yAxis%>']
		for(var tmp = item['<%=yAxis%>']; tmp > 1; tmp--){}
		tmp = Math.round(60 * tmp);

		var str = (JSON.stringify(item['<%=yAxis%>']));
		var index = str.indexOf('.');
		str = str.substring(0, index);
	
		if(tmp < 10) {
			item['<%=yAxis%>'] = (str + ':0' + tmp);
		} else {
			item['<%=yAxis%>'] = (str + ':' + tmp);
		}
		
		}
	});
}
}

	
</script>

<script>

function convertToSec(pace) {
	if(pace.indexOf(':') !== '-1') {
		var min = pace.substring(0, pace.indexOf(':'));
	
		var sec = pace.substring(pace.indexOf(':') + 1);
		
		var paceInSec = (Number(60*min) + Number(sec));
		
		return (paceInSec);
	}
	return pace;

}
</script>
<script>
function cleanData(data, lowerLimit, upperLimit){
console.log(lowerLimit + "/" + upperLimit);
console.log(data);
var counter = 0;
	data.forEach(function(item) {
	console.log('<%=minValue%>');
	console.log('<%=maxValue%>');
	console.log(item['<%=yAxis%>']);
	console.log(item['<%=yAxis%>'] < '<%=minValue%>'); 
	console.log(item['<%=yAxis%>'] > parseInt('<%=maxValue%>', 10));
		if((item['<%=yAxis%>'] <= lowerLimit || item['<%=yAxis%>'] > upperLimit) || (item['<%=yAxis%>'] <= parseInt('<%=minValue%>', 10) || item['<%=yAxis%>'] >= parseInt('<%=maxValue%>', 10))) {
			
			data.splice(counter, 1);
		
		
			console.log("Item Deleted");
		} 
		counter++;
	});
	return data;
}
</script>

<script>


window.onload = function() {

var chartData = JSON.parse(decodeEntities('<%=chartData %>'));
convertToMPM(chartData);
if(('<%=yAxis%>' == 'Avg Pace') || ('<%=yAxis%>' == 'Best Pace')) {
	chartData.forEach(function(item){
	
		item['<%=yAxis%>'] = convertToSec(item['<%=yAxis%>']);
	});														
}


if('<%=sortMethod%>' == 'AO'){
	chartData.sort(function(a, b) {
	return convertToSec(a['<%=xAxis%>']) - convertToSec(b['<%=xAxis%>']);
	});

} 
try{
var lowerLimit = lowerLimits.get('<%=yAxis%>');
} catch(err) {
var lowerLimit = 0;
}
try{
var upperLimit = upperLimits.get('<%=yAxis%>');
} catch(err) {
var upperLimit = 10000;
}

var newData = cleanData(chartData, lowerLimit, upperLimit);

var chart = AmCharts.makeChart("chartdiv", {
  "type": "serial",
  "theme": "light",
  "marginRight": 70,
  "dataProvider": newData,
  "valueAxes": [{
    "axisAlpha": 0,
    "position": "left",
    "title": ("<%=yAxis%> " + unitsY.get("<%=yAxis%>"))
  }],
  "startDuration": 1,
  "graphs": [{
    "balloonText": "<b>[[category]]: [[value]]</b>",
    "fillColorsField": "color",
    "fillAlphas": 0.9,
    "lineAlpha": 0.2,
    "type": "column",
    "valueField": "<%=yAxis%>"
  }],
  
  "chartCursor": {
    "categoryBalloonEnabled": false,
    "cursorAlpha": 0,
    "zoomable": false
  },
  "categoryField": "<%=xAxis%>",
  "categoryAxis": {
    "gridPosition": "start",
    "labelRotation": 30   //changes angle of x-axis lables
  },
   "allLabels": [{
    "text": ("<%=xAxis%> " + unitsX.get("<%=xAxis%>")),
    "x": "!900",
    "y": "!18",
    "width": "50%",
    "size": 15,
    "bold": true,
    "align": "right"
  }],
  "export": {
    "enabled": true
  }

});
}

</script>


<div id="chartdiv"></div>			
	</body>
</html>



